% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_salary.R
\name{extract_salary}
\alias{extract_salary}
\title{Extract numeric salary from text data}
\usage{
extract_salary(salary_text, exclude_below, exclude_above, salary_range_handling,
include_periodicity, hours_per_workday, days_per_workweek, working_weeks_per_year)
}
\arguments{
\item{salary_text}{A character string, or vector of character strings.}

\item{exclude_below}{A lower bound. Anything lower than this number will be replaced with NA.}

\item{exclude_above}{An upper bound. Anything above this number will be replaced with NA.}

\item{salary_range_handling}{A method of handling salary ranges. Defaults to returning an average of the range; can also be set to "max" or "min".}

\item{include_periodicity}{Set to TRUE to return an additional column stating the detected peridicity in the character string.}

\item{hours_per_workday}{Set assumed number of hours in the workday. Only affects annualisation of rates indentified as Daily. Default is 8 hours.}

\item{days_per_workweek}{Set assumed number of days per workweek. Only affects annualisation of rates indentified as Daily. Default is 5 days.}

\item{working_weeks_per_year}{Set assumed number of working weeks in the year. Only affects annualisation of rates indentified as Daily or Weekly. Default is 48 weeks.}
}
\description{
Extract numeric salary from text data. `extract_salary` automatically converts weekly and hourly rates to amounts per annum.
}
\examples{

# Provide salary string(s) to 'extract_salary' and it will do the rest
extract_salary("$160,000 per annum") # 160000



# If a range is present, the average will be taken by default,
# otherwise specify 'min' or 'max' with salary_range_handling parameter
extract_salary("$160,000 - $180000.00 per annum")



# Extract salaries from character string(s)
annual_salaries <- c("$160,000 - $180000.00 per annum", "$160000.00 - $180000.00 per annum",
                     "$145000 - $155000.00 per annum", "$70000.00 - $90000 per annum",
                     "$70000.00 - $90000.00 per annum plus 15.4\% super",
                     "$80000.00 per annum plus 15.4\% super",
                     "60,000 - 80,000", "$78,686 to $89,463 pa, plus 15.4\% superannuation",
                     "80k - 100k")

extract_salary(annual_salaries)



# Extract (and annualise) daily rates
daily_rates <- c("$200 daily", "$400 - $600 per day", "Day rate negotiable dependent on experience")
extract_salary(daily_rates)



# Extract (and annualise) hourly rates
hourly_rates <- c("$80 - $100+ per hour", "APS6/EL1 hourly rate contract")
extract_salary(hourly_rates)




salaries <- c(annual_salaries, daily_rates, hourly_rates)


# Improving accuracy by using lower and upper bound
# If the salary falls outside of these bounds, NA will be returned
# (acting as a catch-all for unrealistically low/high salaries)
extract_salary(salaries, exclude_below = 20000, exclude_above = 600000)



# Where a salary range is found, extract the upper bound
extract_salary(salaries, salary_range_handling = "max")




# Where a salary range is found, extract the lower bound
extract_salary(salaries, salary_range_handling = "min")



# Change number of work weeks in year (from default value of 48) - this
# will only affect salaries identified as Weekly
extract_salary(salaries, working_weeks_per_year = 50)



# Convert daily and hourly rates into annual with default assumptions for hours per workday,
# days per workweek, and working weeks per year
extract_salary(salaries, hours_per_workday = 8, days_per_workweek = 5, working_weeks_per_year = 48)



}
